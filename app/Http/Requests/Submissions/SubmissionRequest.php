<?php

namespace App\Http\Requests\Submissions;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Validator;
use App\Entities\Submission;
use App\Entities\SubmissionCategory;


class SubmissionRequest extends FormRequest
{
    public function authorize()
    {
        return true;
    }

    public function rules()
    {    
        Validator::extend('status', function ($attribute, $value, $parameters, $validator) {
            $submission = Submission::where(['id' => $this->route('submission'), 'company_id' => $this->user()->company_id])->first();
            $role = $this->user()->roles->where('company_id', $this->user()->company_id)->first();
            if ($this->user()->hasRole('super_enterprise')) { 
                return true; 
            }
            return in_array($submission->status, array("DRAFT", "PENDING", "PARTIAL APPROVED"));
        }, "Submission can be Updated if status DRAFT, PENDING, PARTIAL APPROVED");

        Validator::extend('update_after_approved', function ($attribute, $value, $parameters, $validator) {
            $submission = Submission::where(['id' => $this->route('submission'),'company_id' => $this->user()->company_id])->first();
            $amountAfter = 0;
            if ($this->user()->hasRole('super_enterprise')) {
                return true;
            }
            foreach ($this->input("items") as $item) {
                if ($item['quantity'] > 0) {
                    $amount = $submission->submission_category->submission_type == "INCOME" ? ($item['quantity'] * $item['selling_price']) : ($item['quantity'] * $item['buying_price']);
                    if($item['discount'] > 0){
                        $amount	= ($amount - (($amount * $item['discount']))/100);
                    }
                    if($item['tax'] > 0){
                        $amount	= ($amount + (($amount * $item['tax']))/100);
                    }
                }
                $amountAfter += $amount;
            }
            return $amountAfter >= $submission->amount;
        }, 'Submission amount must be greater than or equal to the previous amount if the submission status is APPROVED, PARTIAL PAID, or PAID.');
        Validator::extend('maximum', function ($attribute, $value, $parameters, $validator) {
            $submission = Submission::where(['status' => 'PENDING', 'company_id' => $this->user()->company_id, 'user_id' => $this->user()->id])->count();
            $category = SubmissionCategory::where(['id' => $this->input('category_id'), 'company_id' => $this->user()->company_id])->first();
            if (empty($category)) {
                return true;
            }
            if ($category->maximum == 0|| $this->input('status') != 'oke' ) {
                return true;
            }
            return $submission <= $category->maximum;
        }, 'Submission can not exceeds of maximum PENDING');
        Validator::extend('update_category', function ($attribute, $value, $parameters, $validator) {
            $submission = Submission::with('submission_category')->where(['id' => $this->route('submission'), 'company_id' => $this->user()->company_id])->first();
            $category = SubmissionCategory::where(['id' => $this->input('category_id'), 'company_id' => $this->user()->company_id])->first();
            if (empty($category)) {
                return true;
            }
            return $submission->submission_category->submission_type ==  $category->submission_type;
        }, 'Category is on different type of submission, you have prohibited access to change the type');
        $income = SubmissionCategory::where(['id'=>$this->input('category_id'),'submission_type'=> 'INCOME', 'company_id' => $this->user()->company_id])->count();
        $expense = SubmissionCategory::where(['id'=>$this->input('category_id'),'submission_type'=>'EXPENSE', 'company_id' => $this->user()->company_id])->count();

        if ($this->method()== "PUT" || $this->method() == 'PATCH') {
            $submission = Submission::where(['id' => $this->route('submission'), 'company_id' => $this->user()->company_id])->where('submission_name','ILIKE','%(copy%')->first();
            if(isset($submission)){
                throw new HttpResponseException(response()->json([
                    'success' => false,                            
                    'message' => 'Action Denied, cannot Update submission generated by System',
                ], 400));
            }
            $role = $this->user()->roles->where('company_id', $this->user()->company_id)->first();
            $category = SubmissionCategory::where(['id' => $this->input('category_id'), 'company_id' => $this->user()->company_id])->first();
            $submission = Submission::where(['id' => $this->route('submission'), 'company_id' => $this->user()->company_id])->first();
            if (empty($submission)) {
                throw new HttpResponseException(response()->json([
                    'success' => false,                            
                    'message' => 'Submission not found',
                ], 404));
            }elseif(in_array($submission->status, array("APPROVED","PARTIAL PAID","PAID"))){
                if(!$role->hasPermissionTo('Update Submission '.$category->submission_type .' After APPROVED, Before COMPLETED And Before FULLFILLED')){
                    throw new HttpResponseException(response()->json([
                        'success' => false,                            
                        'message' => 'User does not have the right permission to update Submission after APPROVED',
                    ], 403));
                }
                if($submission->fullfilment == null){
                    $submission_name = [
                        'required','string','regex:/(^[a-zA-z-._ 0-9]+$)/','max:100','update_after_approved', Rule::unique('submissions')->where(function ($query) {
                            return $query->where(['company_id' => $this->user()->company_id]);
                        })->ignore($this->route('submission'))
                    ];
                }else {
                    throw new HttpResponseException(response()->json([
                        'success' => false,                            
                        'message' => 'Submission can be updated if Fullfilment is On Going',
                    ], 403));
                }
            }elseif ($submission->status == "REJECTED"){
                if(!$role->hasPermissionTo("Update Submission ".$category->submission_type." Status REJECTED To PENDING")) {
                    throw new HttpResponseException(response()->json([
                        'success' => false,                            
                        'message' => 'User does not have the right permission to update Submission REJECTED to PENDING',
                    ], 403));
                }
                $submission_name = [
                    'required','string','regex:/(^[a-zA-z-._ 0-9]+$)/','max:100', Rule::unique('submissions')->where(function ($query) {
                        return $query->where(['company_id' => $this->user()->company_id]);
                    })->ignore($this->route('submission'))
                ];
            }
            else{
                $submission_name = [
                    'required', 'string','regex:/(^[a-zA-z-._ 0-9]+$)/','max:100','status', Rule::unique('submissions')->where(function ($query) {
                        return $query->where(['company_id' => $this->user()->company_id]);
                    })->ignore($this->route('submission'))
                ];
            }
            

            return [
                'submission_name'       => $submission_name,
                'date'                  => 'required|date',
                'due_date'              => 'required|date|after_or_equal:date', 
                'customer_email'        => 'required|check_users:users,'.$this->input('customer_email'),
                'category_id'           => ['search:submission_categories,'.$this->input('category_id'),'required','update_category','maximum'],
                'items.*.item_name'     => ['string', 'max:125', Rule::requiredIf($this->input('items.*') != null)],
                'items.*.selling_price' => ['numeric','gte:0', Rule::requiredIf($income > 0)],
                'items.*.buying_price'  => ['numeric','gte:0', Rule::requiredIf($expense > 0)],
                'items.*.tax'           => 'numeric|gte:0',
                'items.*.discount'      => 'numeric|gte:0',
                'items.*.quantity'      => ['numeric','gte:0', Rule::requiredIf($this->input('items.*') != null)],
                'items.*.schedules.*.start' => ['date', Rule::requiredIf($this->input('items.*.schedule.*') != null)],
                'items.*.schedules.*.finish' => ['date', Rule::requiredIf($this->input('items.*.schedules.*') != null)],
                'items.*.schedules.*.product_id' => ['numeric', Rule::requiredIf($this->input('items.*.schedules.*') != null)],
                'order_for.type'        => [Rule::requiredIf(in_array($submission->status, ['DRAFT','PENDING','PARTIAL APPROVED'])), Rule::in(['PERSONAL', 'COMPANY'])],
                'order_for.company_id'  => [Rule::requiredIf($this->input('order_for.type') === "COMPANY")],
                'file'                  => 'mimes:jpeg,bmp,png,jpg,pdf|max:1024',
                'detail_images'         => 'array',
                'detail_images.*.file'  => 'required|mimes:jpeg,bmp,png,jpg,pdf|max:1024',
            ];
        }else{
            $rule_category = $this->input('status') == 'oke' ? ['search:submission_categories,'.$this->input('category_id'),'required','maximum'] 
                            : 'required|search:submission_categories,'.$this->input('category_id');
            return [
                'submission_name'       => ['required','string','regex:/(^[a-zA-z-._ 0-9]+$)/','max:100', Rule::unique('submissions')->where(function ($query) {
                    return $query->where(['company_id' => $this->user()->company_id]);
                })],
                'date'                  => 'required|date',
                'due_date'              => 'required|date|after_or_equal:date', 
                'customer_email'        => 'required|check_users:users,'.$this->input('customer_email'),
                'category_id'           => $rule_category,
                'items.*.item_name'     => ['string', 'max:125',Rule::requiredIf($this->input('items.*') != null)],
                'items.*.selling_price' => ['numeric','gte:0', Rule::requiredIf($income > 0)],
                'items.*.buying_price'  => ['numeric','gte:0', Rule::requiredIf($expense > 0)],
                'items.*.tax'           => 'numeric|gte:0',
                'items.*.discount'      => 'numeric|gte:0',
                'items.*.quantity'      => ['numeric','gt:0', Rule::requiredIf($this->input('items.*') != null)],
                'items.*.schedules.*.start' => ['date', Rule::requiredIf($this->input('items.*.schedule.*') != null)],
                'items.*.schedules.*.finish' => ['date', Rule::requiredIf($this->input('items.*.schedules.*') != null)],
                'items.*.schedules.*.product_id' => ['numeric', Rule::requiredIf($this->input('items.*.schedules.*') != null)],
                'order_for.type'        => ['required', Rule::in(['PERSONAL', 'COMPANY'])],
                'order_for.company_id'  => [Rule::requiredIf($this->input('order_for.type') === "COMPANY")],
                'file'                  => 'mimes:jpeg,bmp,png,jpg,pdf|max:1024',
                'detail_images'         => 'array',
                'detail_images.*.file'  => 'required|mimes:jpeg,bmp,png,jpg,pdf|max:1024',
            ];
        }
    }
    public function messages()
    {
        return $messages = [
            'gte'    => 'fields must be greater than or equal zero',
            'submission_name.search' =>  "submission not found",
            'category_id.search' =>  "category not found",
            'numeric'   => 'fields must be a number',
            'min'       => 'field cannot be less than zero',
            'gt'       => 'field cannot be less than zero',
            'date'      => 'fields is not a valid date',
            'items.*.item_name.regex' => 'the name cannot contain more characters',
            'items.*.item_name.required' => 'item name field is required',
            'items.*.quantity.required' => 'quantity field is required',
            'submission_name.regex' => 'the name cannot contain more characters',
            'order_for.type.required' => 'order type field is required',
            'order_for.company_id.required' => 'company partner field is required',
            'items.*.schedules.*.start.required' => 'start field is required',
            'items.*.schedules.*.finish.required' => 'finish field is required',
            'items.*.schedules.*.product_id.required' => 'product field is required'
        ];
    }
}
