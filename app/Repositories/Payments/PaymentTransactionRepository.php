<?php

namespace App\Repositories\Payments;

use App\Entities\PaymentTransaction;
use App\Entities\PaymentTransactionAttachment;
use App\Entities\Submission;
use Illuminate\Http\Request;
use App\Repositories\BaseRepository;
use App\Repositories\Payments\PaymentTransactionAttachmentRepository;
use App\Http\Criterias\SearchCriteria;
use App\Http\Presenters\DataPresenter;
use App\Http\Resources\Payments\PaymentTransactionResource;

class PaymentTransactionRepository extends BaseRepository
{
	public function __construct(PaymentTransactionAttachmentRepository $paymentTransactionAttachmentRepository)
	{
    parent::__construct(PaymentTransaction::class);
    $this->paymentTransactionAttachmentRepository = $paymentTransactionAttachmentRepository;
	}

	public function browse(Request $request)
	{
		try {
			if(!$this->roleHasPermission("Read Payment Transactions"))
			{
				throw new \Exception("User does not have the right permission.", 403); 
			}
			$this->query = $this->getModel()->where('payment_transactions.company_id', $this->userLogin()->company_id);
			$this->applyCriteria(new SearchCriteria($request));
			$request->total = $this->getTotal();
			$presenter = new DataPresenter(PaymentTransactionResource::class, $request);
	
			return $presenter
				->preparePager()
				->renderCollection($this->query);
		} catch (\Exception $e) {
			return response()->json([
				'success' => false,
				'message' => $e->getMessage()
			], 400);
		}
	}
	public function getTotal()
	{
		return $this->query->join('submissions','submissions.id','=','payment_transactions.submission_id')
		->join('submission_categories','submission_categories.id','=','submissions.category_id')
		->select('payment_transactions.*','submission_type')->sum('payment_transactions.amount');
		
	}
	public function show($id, Request $request)
	{
		if(!$this->roleHasPermission("Read Payment Transactions"))
		{
		    throw new \Exception("User does not have the right permission.", 403); 
		}
		$this->query = $this->getModel()->where(['id' => $id, 'company_id' => $this->userLogin()->company_id]);
		$presenter = new DataPresenter(PaymentTransactionResource::class, $request);

		return $presenter->render($this->query);
	}

	public function store($request)
	{
		\DB::beginTransaction();
		try {
			$submission = Submission::find($request->submission_id); 
			$category = \App\Entities\SubmissionCategory::find($submission->category_id);
			if (strpos($submission->submission_name, '(copy')) {
				throw new \Exception("Action Denied, only add Attachments or Notes in submission generated by the System", 400);
			}
			if(!$this->roleHasPermission("Create Payment Transactions"))
			{
				throw new \Exception("User does not have the right permission.", 403); 
			}
			else {
				if ($this->roleHasPermission('Update All Submission '.$category->submission_type)){ 
					$submission = $submission;
				}
				elseif($this->updateDataByRole($submission, "Update Submission That Are Created By")) {
					$submission = $this->updateDataByRole($submission, "Update Submission That Are Created By");
				}
				elseif ($this->roleHasPermission('Update Submission ' . $category->submission_type)) {
					$submission = $submission->where('user_id', $this->userLogin()->id);
					if (!$submission) {
						throw new \Exception("Action denied, User only have permission to Add payment at her submission", 403);
					}
				}
				else{
					throw new \Exception("User does not have the right permission.", 403);
				}
			}
			$payload                		= $request->all();
			$payload['company_id']  		= $this->userLogin()->company_id;
			$payload['user_id']  			= $this->userLogin()->id;
			$payload['transaction_date']  	= $payload['date'];
			$transaction            		= PaymentTransaction::create($payload);			
			// upload payment transaction attachment
			if(isset($payload['file'])){
				$payload['transaction_id'] = $transaction->id;
				$this->paymentTransactionAttachmentRepository->storePaymentTransactionAttachment($payload);
			}
			$this->updateStatus($payload['submission_id']);

			\DB::commit();
			return $this->show($transaction->id, $request);
		} catch (\Exception $e) {
			\DB::rollback();
			return response()->json([
				'success' => false,
				'message' => $e->getMessage()
			], 400);
		}
	}

	public function update($id, $request)//hold
	{
		try {
			$payment = PaymentTransaction::findOrFail($id);
			$submission = Submission::find($payment->submission_id);
			if (in_array($submission->status, array("PARTIAL PAID","APPROVED"))) {
				$this->updateStatus($submission->id);
				$payment->update($request->all());
				
				// upload payment transaction attachment
				if(isset($payload['file'])){
				$payload['transaction_id'] = $payment->id;
				$payload['company_id'] = $payment->company_id;
				$this->paymentTransactionAttachmentRepository->storePaymentTransactionAttachment($payload);
				}
			}else {
				throw new \Exception("When Submission is COMPLETED, Payment Transaction can not be updated", 403); 
			}
			return $this->show($id, $request);
		} catch (\Exception $e) {
			return response()->json([
				'success' => false,
				'message' => $e->getMessage()
			], 400);
		}
	}

	public function destroy($id)
	{
		try {
			$payment = PaymentTransaction::where(['id' => $id, 'company_id' => $this->userLogin()->company_id])->firstOrFail();
			$submission = Submission::find($payment->submission_id); 
			if (strpos($submission->submission_name, '(copy') || strpos($submission->submission_name, '#')) {
				throw new \Exception("Action Denied, only delete Attachments or Notes submission generated by System", 400);
			}
			if(!$this->roleHasPermission("Delete Payment Transactions"))
			{
				throw new \Exception("User does not have the right permission.", 403); 
			}
			$submission = Submission::find($payment->submission_id);
			if (in_array($submission->status, array("PARTIAL PAID","PAID"))) {
				PaymentTransactionAttachment::where('transaction_id', $id)->delete();
				$payment->delete();
				$this->updateStatus($submission->id);
			}else {
				throw new \Exception("When Submission is COMPLETED, Transaction can not be deleted", 403); 
			}
			return response()->json([
				'success' => true,
				'message' => 'data has been deleted'
			], 200);
		} catch (\Exception $e) {
			return response()->json([
				'success' => false,
				'message' => $e->getMessage()
			], 400);
		}
	}
	protected function updateStatus($id)
	{
		$submission             = Submission::find($id);
		$transactionAmount      = PaymentTransaction::where('submission_id', $id)->sum('amount');
		$submission->status     = (($transactionAmount 	== 0) ? "APPROVED" : 
		(($transactionAmount 	< $submission->amount) ? "PARTIAL PAID" : 
		(($submission->amount - $transactionAmount == 0) ?"PAID": "PARTIAL PAID")));
		$submission->save();
		$partnerCompany = \App\Entities\User::find($submission->partner_id);
		if($this->havingRole($partnerCompany,'enterprise') && in_array($submission->status, array("APPROVED", "PARTIAL PAID", "PAID", "COMPLETED")))
		{
			$this->copySubmissionToVendorOrCustomer($submission->id);
		}
	}  
}
